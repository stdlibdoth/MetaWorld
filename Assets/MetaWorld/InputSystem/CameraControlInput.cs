//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MetaWorld/InputSystem/CameraControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControlInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControlInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControlInput"",
    ""maps"": [
        {
            ""name"": ""EditingCam"",
            ""id"": ""339d89dc-af4e-454c-824a-9d42a7439508"",
            ""actions"": [
                {
                    ""name"": ""Pan"",
                    ""type"": ""Button"",
                    ""id"": ""445279c8-1103-40b6-8eb5-6bf02ce1693a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""6c8cc3da-4f1f-444f-99bd-cd8cb3787ba5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""8fe61c4c-e66f-4f96-b243-cd73647ae4f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""179beba4-310c-4301-b2e4-8edc346d858c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputMove"",
                    ""type"": ""Value"",
                    ""id"": ""f778c90b-4e68-408e-b8a1-3a45e8dfcd18"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputScreenPositioning"",
                    ""type"": ""Value"",
                    ""id"": ""4159caa8-ab50-41c0-8ebf-ecf457b0d78c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f6c7206-271b-4378-8f8b-a642d0818436"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b71182b-9ae1-421e-8ded-ac7b8b263735"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f933c79-c0ba-4abe-b380-b2bdd2767de1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab088f68-fb2d-461e-9b8a-c6851451a59d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65f3824-a063-4433-97e0-a7a52dca3670"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ba246b6-36c3-462c-b50d-810017d7721d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputScreenPositioning"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // EditingCam
        m_EditingCam = asset.FindActionMap("EditingCam", throwIfNotFound: true);
        m_EditingCam_Pan = m_EditingCam.FindAction("Pan", throwIfNotFound: true);
        m_EditingCam_Rotate = m_EditingCam.FindAction("Rotate", throwIfNotFound: true);
        m_EditingCam_Reset = m_EditingCam.FindAction("Reset", throwIfNotFound: true);
        m_EditingCam_Zoom = m_EditingCam.FindAction("Zoom", throwIfNotFound: true);
        m_EditingCam_InputMove = m_EditingCam.FindAction("InputMove", throwIfNotFound: true);
        m_EditingCam_InputScreenPositioning = m_EditingCam.FindAction("InputScreenPositioning", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EditingCam
    private readonly InputActionMap m_EditingCam;
    private IEditingCamActions m_EditingCamActionsCallbackInterface;
    private readonly InputAction m_EditingCam_Pan;
    private readonly InputAction m_EditingCam_Rotate;
    private readonly InputAction m_EditingCam_Reset;
    private readonly InputAction m_EditingCam_Zoom;
    private readonly InputAction m_EditingCam_InputMove;
    private readonly InputAction m_EditingCam_InputScreenPositioning;
    public struct EditingCamActions
    {
        private @CameraControlInput m_Wrapper;
        public EditingCamActions(@CameraControlInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pan => m_Wrapper.m_EditingCam_Pan;
        public InputAction @Rotate => m_Wrapper.m_EditingCam_Rotate;
        public InputAction @Reset => m_Wrapper.m_EditingCam_Reset;
        public InputAction @Zoom => m_Wrapper.m_EditingCam_Zoom;
        public InputAction @InputMove => m_Wrapper.m_EditingCam_InputMove;
        public InputAction @InputScreenPositioning => m_Wrapper.m_EditingCam_InputScreenPositioning;
        public InputActionMap Get() { return m_Wrapper.m_EditingCam; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditingCamActions set) { return set.Get(); }
        public void SetCallbacks(IEditingCamActions instance)
        {
            if (m_Wrapper.m_EditingCamActionsCallbackInterface != null)
            {
                @Pan.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnPan;
                @Pan.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnPan;
                @Pan.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnPan;
                @Rotate.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnRotate;
                @Reset.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnReset;
                @Zoom.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnZoom;
                @InputMove.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputMove;
                @InputMove.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputMove;
                @InputMove.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputMove;
                @InputScreenPositioning.started -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputScreenPositioning;
                @InputScreenPositioning.performed -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputScreenPositioning;
                @InputScreenPositioning.canceled -= m_Wrapper.m_EditingCamActionsCallbackInterface.OnInputScreenPositioning;
            }
            m_Wrapper.m_EditingCamActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pan.started += instance.OnPan;
                @Pan.performed += instance.OnPan;
                @Pan.canceled += instance.OnPan;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @InputMove.started += instance.OnInputMove;
                @InputMove.performed += instance.OnInputMove;
                @InputMove.canceled += instance.OnInputMove;
                @InputScreenPositioning.started += instance.OnInputScreenPositioning;
                @InputScreenPositioning.performed += instance.OnInputScreenPositioning;
                @InputScreenPositioning.canceled += instance.OnInputScreenPositioning;
            }
        }
    }
    public EditingCamActions @EditingCam => new EditingCamActions(this);
    public interface IEditingCamActions
    {
        void OnPan(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnInputMove(InputAction.CallbackContext context);
        void OnInputScreenPositioning(InputAction.CallbackContext context);
    }
}
